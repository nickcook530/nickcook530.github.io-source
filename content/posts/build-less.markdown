Title: Build less, learn more
Date: 2020-05-12
Modified: 2020-05-12
Category: product-management
Tags: product management, software
Slug: build-less-learn-more
Authors: Nick Cook
Summary: *"Don't build it and see if they will come."*
<!-- modified: 2020-05-12 -->

*"Don't build it and see if they will come."*

---
**Lesson Learned:**
"Build it and he will come" a mysterious voice whispers to Kevin Costner in an attempt to get him to build a basesball field in the movie Field of Dreams. I can tell you one thing, that mysterious voice was certainly not coming from a product manager. No PM would suggest spending the resources to build a basesball field without solid evidence that anyone would use it. While it ended up working out for Costner's character we can't rely on mysterious voices in software development and instead have to rely on validating appetite for a feature prior to building it in full.

In the [previous post](/minimum-viable-product) we discussed the concept of a minimum viable product (MVP). You might have already started thinking about all the features you could strip out of your next product to build a true MVP but let's get even more "minimum", let's not build anything at all. Remember, the point of an MVP is to collect maximum learning for the least amount of effort. The first thing we probably want to learn is if people are actually interested in our product so let's look at some options for doing that with the least amount of effort.

One option is to "take sign-ups". Taking sign-ups can come in a variety of forms with different levels of commitment required from potential users. On one end of the commitment spectrum you have a website like Kickstarter. On Kickstarter people actually put their money down to pre-purchase a product that has not yet been made. Getting individuals to provide their credit card information for a yet unmade product is an excellent indicator that your product is filling a need that is not currently being met. On the other end of the commitment spectrum we have email sign-ups or click tracking. You can simply provide the option on your website for prospective users to enter an email address to get updates on a product that has yet to be made and track how many email sign-ups you received. Or maybe you're a mobile game and you introduce a button in the game menu for a new feature that hasn't been developed yet so you can track how many users actually click on that button. Compared to taking money the commitment level from the user is obviously much lower but the advantage is these tests are easier to setup and available in scenarios where you won't actually be charging money for the new product, like a new feature in a SaaS product.

Another option is to "pull a Wizard of Oz". For my second, and final, movie reference of the blog post I wanted to explain how the Wizard of Oz can actually teach us product management lesson. You see, the man behind the curtain had two choices, he could either become a great and powerful wizard (sounds time consuming) or he could create the illusion of being one (much simpler). We can take this same approach when developing products. Let's imagine we want to build an application where users input recipes and receive a grocery list containing the required ingredients. We could just build the input portion of the application, manually create the grocery lists ourselves, and then email the grocery list back to the user. Taking it a step further we could skip building the input interface all together and complete both the input and output process over email. In either case you are replacing the part that is time consuming to develop with a human, a "man behind the curtain" if you will. Obviously this is not sustainable but that's okay because we are simply trying to do the least amount of work to determine if people are actually interested in our product.


**Learning Experience:**

Two similar experiences jumped to my mind when thinking about this blog topic. The first example centers around trying to determine if we should spend development time bringing a feature from our old application interface to our new one. The feature in question was the ability to link two areas of the application together. This linking feature was available all over our application but had varying degrees of usage. Some areas presented easy cuts, others were easy keeps, and some, like the one in this example, didn't have a clear answer based on the qualitative and quantitative data available to us. While our old interface did not support click tracking our new interface did. What we ended up doing was displaying the tab (screen) where the links would be created and seen but put nothing on the tab other than the words "Coming soon". We then tracked how many users were clicking on that tab to see if links were available in this area. Turns out, based on the number of clicks, a lot of users were looking for links in this area. Combined with the information we already had this click data gave us the confidence that this feature was something users wanted in our new interface and we proceeded with developing said feature.

The second example has to do with deciding whether or not to bring chat functionality into our application. We have a help center that is separate from our application and inside that help center there is a chat option which allows you ask questions and receive live answers to them. The chat functionality was a native feature of the help center so implementing it there was straightforward. While customers who used the help center chat had a positive experience not a lot of customers were using it. We had a theory that customers would use chat a lot more if it was brought inside the application. 